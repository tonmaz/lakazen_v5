type Comments @aws_iam @aws_api_key {
  id: ID!
  title: String
  content: String
  like: String
  postID: ID
  userID: ID
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post @aws_iam @aws_api_key {
  id: ID!
  comment: String
  likes: Int
  description: String
  title: String
  uploadDate: AWSDate
  published: Boolean
  userID: ID
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  PostsComments(filter: ModelCommentsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentsConnection @aws_iam @aws_api_key
}

type User @aws_iam @aws_api_key {
  id: ID!
  name: String
  age: Int
  country: String
  city: String
  gender: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  UserComments(filter: ModelCommentsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentsConnection @aws_iam @aws_api_key
  UserPosts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_api_key
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCommentsConnection @aws_api_key @aws_iam {
  items: [Comments]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelCommentsFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  like: ModelStringInput
  postID: ModelIDInput
  userID: ModelIDInput
  and: [ModelCommentsFilterInput]
  or: [ModelCommentsFilterInput]
  not: ModelCommentsFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getComments(id: ID!): Comments @aws_api_key @aws_iam
  listCommentss(filter: ModelCommentsFilterInput, limit: Int, nextToken: String): ModelCommentsConnection @aws_api_key @aws_iam
  syncComments(filter: ModelCommentsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCommentsConnection @aws_api_key @aws_iam
  getPost(id: ID!): Post @aws_api_key @aws_iam
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_iam
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
}

input CreateCommentsInput {
  id: ID
  title: String
  content: String
  like: String
  postID: ID
  userID: ID
  _version: Int
}

input UpdateCommentsInput {
  id: ID!
  title: String
  content: String
  like: String
  postID: ID
  userID: ID
  _version: Int
}

input DeleteCommentsInput {
  id: ID
  _version: Int
}

type Mutation {
  createComments(input: CreateCommentsInput!, condition: ModelCommentsConditionInput): Comments @aws_api_key @aws_iam
  updateComments(input: UpdateCommentsInput!, condition: ModelCommentsConditionInput): Comments @aws_api_key @aws_iam
  deleteComments(input: DeleteCommentsInput!, condition: ModelCommentsConditionInput): Comments @aws_api_key @aws_iam
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
}

input ModelCommentsConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  like: ModelStringInput
  postID: ModelIDInput
  userID: ModelIDInput
  and: [ModelCommentsConditionInput]
  or: [ModelCommentsConditionInput]
  not: ModelCommentsConditionInput
}

type Subscription {
  onCreateComments: Comments @aws_subscribe(mutations: ["createComments"]) @aws_api_key @aws_iam
  onUpdateComments: Comments @aws_subscribe(mutations: ["updateComments"]) @aws_api_key @aws_iam
  onDeleteComments: Comments @aws_subscribe(mutations: ["deleteComments"]) @aws_api_key @aws_iam
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"]) @aws_api_key @aws_iam
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"]) @aws_api_key @aws_iam
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"]) @aws_api_key @aws_iam
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
}

type ModelPostConnection @aws_api_key @aws_iam {
  items: [Post]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostFilterInput {
  id: ModelIDInput
  comment: ModelStringInput
  likes: ModelIntInput
  description: ModelStringInput
  title: ModelStringInput
  uploadDate: ModelStringInput
  published: ModelBooleanInput
  userID: ModelIDInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  comment: String
  likes: Int
  description: String
  title: String
  uploadDate: AWSDate
  published: Boolean
  userID: ID
  _version: Int
}

input UpdatePostInput {
  id: ID!
  comment: String
  likes: Int
  description: String
  title: String
  uploadDate: AWSDate
  published: Boolean
  userID: ID
  _version: Int
}

input DeletePostInput {
  id: ID
  _version: Int
}

input ModelPostConditionInput {
  comment: ModelStringInput
  likes: ModelIntInput
  description: ModelStringInput
  title: ModelStringInput
  uploadDate: ModelStringInput
  published: ModelBooleanInput
  userID: ModelIDInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  age: ModelIntInput
  country: ModelStringInput
  city: ModelStringInput
  gender: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  name: String
  age: Int
  country: String
  city: String
  gender: String
  _version: Int
}

input UpdateUserInput {
  id: ID!
  name: String
  age: Int
  country: String
  city: String
  gender: String
  _version: Int
}

input DeleteUserInput {
  id: ID
  _version: Int
}

input ModelUserConditionInput {
  name: ModelStringInput
  age: ModelIntInput
  country: ModelStringInput
  city: ModelStringInput
  gender: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}
